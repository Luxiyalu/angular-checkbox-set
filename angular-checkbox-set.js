// Generated by CoffeeScript 1.8.0
(function() {
  var module;

  module = angular.module('luxiyalu.checkboxSet', []);

  module.value('checkboxHooks', {});

  module.directive('checkbox', function(checkboxHooks) {
    return {
      restrict: 'E',
      scope: {
        hook: '=',
        hookedTo: '=',
        statusStoredIn: '='
      },
      templateUrl: 'templates/checkbox.html',
      link: function($scope, element, attr) {
        var broadcastUpdate, emitUpdate, hook, hookedTo, pcb, self, statusObj;
        self = {};
        hook = $scope.hook;
        hookedTo = $scope.hookedTo;
        statusObj = $scope.statusStoredIn;
        statusObj.checked = false;
        if (hookedTo != null) {
          if (checkboxHooks[hookedTo] != null) {
            pcb = checkboxHooks[hookedTo];
            statusObj.checked = pcb.scope.statusStoredIn.checked;
          } else {
            pcb = checkboxHooks[hookedTo] = {};
          }
          self.scope = $scope;
          self.parent = hookedTo;
          self.statusObj = statusObj;
          if (pcb.children == null) {
            pcb.children = [];
          }
          pcb.children.push(self);
        }
        if (hook != null) {
          self = checkboxHooks[hook] != null ? checkboxHooks[hook] : checkboxHooks[hook] = {};
          if (self.scope == null) {
            self.scope = $scope;
          }
          self.parent = hookedTo;
          $scope.checkIfAll = function(state) {
            var result;
            return result = self.children.every(function(e, i, a) {
              return e.statusObj.checked === state;
            });
          };
        }
        $scope.toggleCheck = function(specify, direction) {
          statusObj.checked = specify != null ? specify : !statusObj.checked;
          if (specify == null) {
            broadcastUpdate();
            return emitUpdate();
          } else if (direction === 'broadcast') {
            return broadcastUpdate();
          } else if (direction === 'emit') {
            return emitUpdate();
          }
        };
        broadcastUpdate = function() {
          var child, _i, _len, _ref, _results;
          if ((self != null ? self.children : void 0) == null) {
            return;
          }
          _ref = self.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.scope.toggleCheck(statusObj.checked, 'broadcast'));
          }
          return _results;
        };
        emitUpdate = function() {
          if (hookedTo == null) {
            return;
          }
          if (!statusObj.checked) {
            return pcb.scope.toggleCheck(false, 'emit');
          } else {
            if (!pcb.scope.checkIfAll(true)) {
              return;
            }
            return pcb.scope.toggleCheck(true, 'emit');
          }
        };
        if (hook != null) {
          $scope.toggleCheck(statusObj.checked, 'broadcast');
          return $scope.$on('$destroy', function() {
            return delete checkboxHooks[hook];
          });
        }
      }
    };
  });

}).call(this);
